<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>SampleSpringBoot</groupId>
	<artifactId>SampleSpringBoot</artifactId>
	<!--<packaging>war</packaging>-->
	<packaging>jar</packaging>
	<version>0.0.1-SNAPSHOT</version>
	<name>SampleSpringBoot Maven Webapp</name>
	<url>http://maven.apache.org</url>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.1.8.RELEASE</version>
	</parent>
	
	<properties>
		<!-- There are two classes having main method. To tell Spring Boot which class to use, you need to add this property -->
        <!-- <start-class>spring.boot.rest.HelloWorld</start-class>  -->
        <!-- Comment above and uncomment this to test jdbc with spring-boot --> 
        <start-class>spring.boot.rest.Example</start-class>
         
    </properties>
    
	<dependencies>
		<!-- This dependency allows spring to decide that you want this project 
			to be spring mvc. So, it automatically adds dependencies related to spring 
			mvc jars and also makes inbuilt tomcat server available 
		
			Just like 'spring-boot-starter-web', many other starter poms(dependencies) are available.
			http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#using-boot-starter-poms
				
		-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<!-- spring-boot-starter-jetty replaces inbuilt tomcat availability to jetty availability. 
		If run 'mvn spring-boot:run, it will start jetty intstead of tomcat.
		There are some limitations with Jetty. Jetty does not currently work as an embedded container with JSPs.
		 -->
		<!--
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jetty</artifactId>
		</dependency>
		-->

		<!-- you will see log4j jars added in your classpath 
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-log4j</artifactId>
		</dependency>
		-->

    </dependencies>


	<build>
		<finalName>SampleSpringBoot</finalName>

		<plugins>
			<!--
			This plugin's documentation:
			http://docs.spring.io/spring-boot/docs/1.2.0.BUILD-SNAPSHOT/maven-plugin/usage.html 
			
			The Spring Boot Maven Plugin provides Spring Boot support in Maven, allowing you to package executable jar or war archives and run an application “in-place”.
			It repackages (rearranges jar/war) file. To repackage it, jar/war has to be there first. So, use 'mvn install spring-boot:repackage'. 'mvn install' will first create jar/war in target directory and spring-boot:repackage will try to repackage it as per the configurations provided in the plugin 
			
			You can override default configuration of manifest file to mention main class, where to place all dependencies etc.
			-->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<!-- Basically, you are replacing maven's jar or war plugins by spring-boot-maven-plugin
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>${maven-jar-plugin-verion}</version>
				<configuration>
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
							<useUniqueVersions>false</useUniqueVersions>
							<classpathPrefix>${lib.location}</classpathPrefix>
							<mainClass>com.cobalt.services.offerLoader.holdenOfferLoader.client.HoldenOffersLoaderClient</mainClass>
						</manifest>
					</archive>
					<excludes>
						<exclude>${jar.devprops.exclude}</exclude>
					</excludes>
					<finalName>${project.artifactId}</finalName>
				</configuration>
			</plugin>
			 -->
			
		</plugins>
	</build>
</project>
